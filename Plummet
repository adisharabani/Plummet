#! /bin/bash

LOGFILE=/home/pi/p.log

ARDLIB=/home/pi/arduino-1.8.10

ARDTTY_PATTERN="tty(USB|ACM)"

BAUD_RATE=9600
BAUD_RATE=38400

if [ $# -eq 0 ]; then
whiptail --textbox Plummet.txt 25 78
 while : ; do
   cmd=$(whiptail --title "Plummet 2.0 ($HOSTNAME)" --cancel-button "Quit" --menu "Choose an option:" 25 78 16 \
         "Attach" "View and control connected Arduinos." \
         "Attach Master" "View and control master Arduino." \
	 "Connect To Rasp1" "Connect to Rasp1." \
         "Export" "export timeline to local file." \
         "Upload" "Upload app to the connected Arduinos." \
         "Reorder" "Automatically reorder devices by connection order" \
         "Edit Playback" "Edit the playback file" \
         "Upload Loop" "Continuesly upload to Arduinos." \
         "List Connections" "Show wiring instructions." \
         "List Devices" "Show all connected Arduinos." \
         "List Commands" "Show list of commands." \
         "Update" "Update app from the internet." \
         "History" "Review history and revert to an older version" \
         "Compile" "Compile the Arduino code." \
         "Revert" "Revert to a production version" \
         "Record" "Attach to Arduinos while recording output" \
         "Join Attached" "Join an attached screen." \
         "Setup" "First time setup." 3>&2 2>&1 1>&3 )

   [ "$cmd" = "" ] && break;
   cmd="${cmd// /}";
   cmd="${cmd,}"
   
   case "$cmd" in 
     attach | record | editPlayback | joinAttached | attachMaster | uploadLoop | connectToRasp1 | history)
        $0 $cmd 
     ;;
     upload | compile | setup | update | reorder)
     	nDevices=$( $0 listDevices | wc -l )
     	cmdSuffix=" (${nDevices} arduino${nDevices:+s} connected)"
        
        $0 $cmd $([ "$cmd" = "compile" ] && echo -verbose ) 2>&1 | tee /tmp/output | awk -W interactive 'BEGIN {i=1;status=""} {if ($0 != "") status=$0; printf "XXX\n%d\n%s\nXXX\n",i,status; i=i+1}' |whiptail --title "$cmd${cmdSuffix}" --gauge "$cmd" 6 60 0
        if [ ${PIPESTATUS[0]} != 0 ]; then
            whiptail --title "There was an error" --scrolltext --textbox /tmp/output 25 78
            rm -rf /tmp/output
        fi
     ;;
     *)
       whiptail --scrolltext --textbox /dev/stdin 25 78 <<<"$($0 $cmd | tr -d '\r')" 
     ;;
   esac
 done
 echo "Type ./Plummet to restart the program"
fi

if [ "$1" = "connectToRasp1" ]; then
 ssh -t rasp1.local 'cd Plummet && ./Plummet';
fi

if [ "$1" = "test" ] ; then
 echo 1
 sleep 1
 echo 2
 sleep 1
 ls -l /dev
 exit 2
fi
if [ "$1" = "help" ] ; then
 echo "Use args attach, upload, uploadLoop, listConnections, listDevices, listCommands, update, compile, install, cua"
fi

if [ "$1" = "cua" ] ; then
 $0 compile && $0 upload $2 && $0 attach $2
fi

if [ "$1" = "cu" ] ; then
 $0 compile && $0 upload $2
fi

if [ "$1" = "setup" ]; then
 command -v inotifywait > /dev/null || sudo apt-get install inotify-tools
 command -v screen > /dev/null || sudo apt-get install screen
 command -v cu > /dev/null || sudo apt-get install cu
 command -v bc > /dev/null || sudo apt-get install bc
 command -v apache2 > /dev/null || ( sudo apt-get install apache2 && sudo a2enmod cgi  && sudo systemctl restart apache2 )

 if [ ! -d "$ARDLIB" ] ; then
   cd ..
   curl -L -o arduino-1.8.10-linuxarm.tar.xz https://www.arduino.cc/download.php?f=/arduino-1.8.10-linuxarm.tar.xz
   tar -xf arduino-1.8.10-linuxarm.tar.xz 
   cd Plummet
 fi
#sudo apt-get  install avahi-daemon
fi

if [ "$1" = "compile" ] || [ "$1" = "revert" ]; then
 echo "Compiling Plummet"
 if [ "$1" = "revert" ]; then
   echo "Compiling Production environment"
   srcfile='production/Plummet.ino'
 else
   srcfile='Plummet.ino'
 fi

 mkdir -p build
 ${ARDLIB}/arduino-builder -hardware ${ARDLIB}/hardware -tools ${ARDLIB}/hardware/tools/avr -tools ${ARDLIB}/tools-builder -libraries ${ARDLIB}/libraries -libraries Libraries -fqbn arduino:avr:uno -prefs=compiler.path=${ARDLIB}/hardware/tools/avr/bin/ -prefs=tools.ctags.path=${ARDLIB}/tools-builder/ctags/5.8-arduino11 -build-path build $2 $srcfile 
 status=$?
 if [ $status ] && [ "$1" = "revert" ]; then
  $0 upload
 fi
 exit $status 
fi

if [ "$1" = "upload" ]; then
 $0 prepForShutDown $2
 echo "Uploading Plummet to ${2:-all connected devices}"
 for ard in $($0 listDevices $2); do
   echo "uploading to $ard"
   ${ARDLIB}/hardware/tools/avr/bin/avrdude -C${ARDLIB}/hardware/tools/avr/etc/avrdude.conf -patmega328p -carduino -P/dev/${ard} -b115200 -Uflash:w:build/Plummet.ino.hex:i -F &
 done
 wait
#  sleep 1
#  echo "Starting Arduinos"
#  for ard in $($0 listDevices $2); do
#    (echo -n; sleep 0.1) | cu -l /dev/$ard &
#  done
#  wait
 for ard in $($0 listDevices $2); do
   stty -F /dev/${ard} cs8 $BAUD_RATE ignbrk -brkint -icrnl -imaxbel -opost -ocrnl -onlret -isig -icanon -iexten -echo -echoe -echok -echoctl -echoke noflsh -ixon -crtscts
 done
  sleep 4
fi

if [ "$1" = "uploadLoop" ]; then
 $0 upload $2
 echo "Continuesly uploading to any arduino that will be attached (Press Ctrl+C to stop)"
 inotifywait -m /dev -e create -e moved_to |
    while read path action ard; do
        if [[ $ard =~ $ARDTTY_PATTERN ]]; then # && [ $action = "CREATE" ]; then
           echo "New arduino connection detected ($ard)"
           $0 upload $ard
        fi
    done
fi

if [ "$1" = "update" ]; then
 echo Updating app from the internet
 gitresults="$(git pull)"
 if [ "$gitresults" = "Already up-to-date." ] || [ "$gitresults" = "Already up to date." ]; then 
   echo "Already up to date."
 else
   $0 compile -verbose && $0 upload
 fi
 exit $?
fi

if [ "$1" = "listConnections" ]; then
 cat Plummet.ino | cut -c 3- | awk 'BEGIN {p=1} /Help/ {p=0} (p==1) {printf "%s\r\n" , $0} '
fi

if [ "$1" = "listCommands" ]; then
 cat Plummet.ino | grep "case '" | grep // | sed s/\ *case\ \'//g | sed s_\':\ //_:_g | awk 'BEGIN {printf " AvailableCommands:\r\n";} {printf "%s\r\n", $0} END {printf "  <Tab> or <Shift-Tab>: switch between tabs\r\n  <Esc>: quit\r\n"}'
fi

if [ "$1" = "attach_old" ]; then
 ard=$($0 listDevices $2| tail -1)
 if [ "$ard" == "" ]; then
   echo "No device matched attached. Following are the devices connected:"
   $0 listDevices
   exit 1
 fi 
 echo "Connecting to ${ard}:"

 $0 listCommands > $(cat /tmp/screen${ard})

 #stty -F /dev/${ard} cs8 38400 ignbrk -brkint -icrnl -imaxbel -opost -ocrnl -onlret -isig -icanon -iexten -echo -echoe -echok -echoctl -echoke noflsh -ixon -crtscts
 stty -F /dev/${ard} raw -echo -echoe -echok -echoctl -echoke

 screen -R -S ${ard} /dev/${ard} $BAUD_RATE

 #screen -R -S ${ard} bash -c 'tty > /tmp/screen${ard}; '$0' listCommands; cu -l /dev/'${ard}' -s 38400'
 #screen -R -S ${ard} bash -c 'tty > /tmp/screen${ard}; '$0' listCommands; tail -f /dev/'${ard}' &; cat > /dev/'${ard}
 # ~. to quit CU process
fi

if [ "$1" = "attachMaster" ]; then
	masterArd=$($0 getMasterArd)
	$0 attach $masterArd
fi

if [ "$1" = "attach" ] || [ "$1" = "record" ] || [ "$1" = "detached" ] || [ "$1" = "detached_record" ]; then
 sttys=($(stty size))
 if [ ${#sttys} -gt 0 ] && [ $(( ${sttys[0]} * 2 )) -lt ${sttys[1]} ]; then
 	layout="horizontal"
 else
    layout="vertical"
 fi
 
 $0 kill
 echo 'bindkey -k kB focus prev' > /tmp/.screens
 echo 'bindkey "	" focus next' >> /tmp/.screens
 echo 'bindkey "`" detach' >> /tmp/.screens
 echo 'bindkey "\033" detach' >> /tmp/.screens
 echo 'bindkey "^[[1;2A" focus up' >> /tmp/.screens
 echo 'bindkey "^[[1;2B" focus down' >> /tmp/.screens
 echo 'bindkey "^[[1;2C" focus right' >> /tmp/.screens
 echo 'bindkey "^[[1;2D" focus left' >> /tmp/.screens
 echo 'bindkey "^z" layout next' >> /tmp/.screens

 echo 'mousetrack on' >> /tmp/.screens
 isFirst=1
 for ard in $($0 listDevices $2); do
   stty -F /dev/${ard} cs8 $BAUD_RATE ignbrk -brkint -icrnl -imaxbel -opost -ocrnl -onlret -isig -icanon -iexten -echo -echoe -echok -echoctl -echoke -noflsh -ixon -crtscts
   if [ "$isFirst" = "0" ]; then
      echo split >> /tmp/.screens
      echo focus >> /tmp/.screens
   fi
   if [ "1" = "1" ] || [ "$1" = "record" ] || [ "$1" = "detached_record" ]; then
		# echo "screen -t ${ard} bash -c \"cu -l /dev/${ard} -s $BAUD_RATE | tee -a _${ard}.record\"" >> /tmp/.screens
		echo "--" $(date) "--" >> ${ard}.record
		echo logfile "${ard}.record" >> /tmp/.screens
		echo logtstamp on >> /tmp/.screens
	   echo screen -L -t ${ard} /dev/${ard} $BAUD_RATE >> /tmp/.screens
	else
	   echo screen -t ${ard} /dev/${ard} $BAUD_RATE >> /tmp/.screens
	fi
   echo 'stuff "e\nB\n \n"' >> /tmp/.screens
   if [ "$isFirst" = "1" ]; then
      echo split -v >> /tmp/.screens
      echo focus >> /tmp/.screens
      #echo screen bash -c '"' $0 listCommands ';' cat  '"' >> /tmp/.screens
      #echo screen -t Help bash -c '"' $0 listCommands '|' less -S -# 5 '"' >> /tmp/.screens
      echo screen -t Help bash -c '"' $0 control '"' >> /tmp/.screens
      echo resize -h 40 >> /tmp/.screens
      echo focus prev >> /tmp/.screens
   fi
   isFirst=0
 done;
 echo "hardstatus alwayslastline" >> /tmp/.screens
 echo "hardstatus string 'Press <Esc> to quit'" >> /tmp/.screens
 echo "focus top" >> /tmp/.screens
 echo "focus right" >> /tmp/.screens
 echo "focus bottom" >> /tmp/.screens
 echo "msgwait 0" >> /tmp/.screens
 	  echo "layout save horizontal" >> /tmp/.screens
  	  echo "remove" >> /tmp/.screens
  	  echo "layout save none" >> /tmp/.screens
  	  echo "focus bottom" >> /tmp/.screens
       echo split >> /tmp/.screens
       echo focus >> /tmp/.screens
#       #echo screen bash -c '"' $0 listCommands ';' cat  '"' >> /tmp/.screens
#       #echo screen -t Help bash -c '"' $0 listCommands '|' less -S -# 5 '"' >> /tmp/.screens
      echo screen -t Help bash -c '"' $0 control '"' >> /tmp/.screens
 	  echo "layout save vertical" >> /tmp/.screens 
	  echo "layout select ${layout}" >> /tmp/.screens
 echo "layout save default" >> /tmp/.screens 
 if [ "$1" = "detached" ] || [ "$1" = "detached_record" ]; then
    screen -d -L -m -c /tmp/.screens -S ATTACH
 else 
    screen -L -c /tmp/.screens -S ATTACH
 fi
 #$0 kill
 #screen -R -S ${ard} bash -c 'tty > /tmp/screen${ard}; '$0' listCommands; cu -l /dev/'${ard}' -s 38400'
 #screen -R -S ${ard} bash -c 'tty > /tmp/screen${ard}; '$0' listCommands; tail -f /dev/'${ard}' &; cat > /dev/'${ard}
 # ~. to quit CU process
fi

if [ "$1" = "joinAttached" ]; then
	screen -x ATTACH
fi

if [ "$1" = "kill" ]; then
while [ $(screen -ls | grep '(' | wc -l) -gt 0 ]; do screen -S $(screen -ls | grep '(' | head -1 | cut -d. -f 1) -X kill; screen -wipe; sleep 0.1; done
#killall screen
fi


if [ "$1" = "reorder" ]; then
 echo "Reordering Devices (this may take a few sec)"
 for ard in $($0 listDevicesHelper | tr " " "\n" | sort | cut -d : -f 2-); do
   touch /dev/$ard
   sleep 0.5
 done
 echo done
fi

if [ "$1" = "listDevices" ]; then
	ls -trc $(find /dev/ -type c -regextype "posix-extended" -iregex '/dev/('${2}'|'${ARDTTY_PATTERN}${2}'.*)') | cut -c 6- 
fi

if [ "$1" = "listDevicesHelper" ]; then
 $0 kill > /dev/null
 for d in $(find /dev/ -type c -regextype "posix-extended" -iregex '/dev/('${2}'|'${ARDTTY_PATTERN}${2}'.*)' | cut -c 6- ); do
    #screenType=$((echo B; sleep 0.1) | cu -l /dev/$d 2>&1 | grep 'I am' | tr ' ' '\n' | grep '#' | tail -1 | tr -d '\r\n')
    screenType=$($0 command "$d" B | grep 'I am' | tr ' ' '\n' | grep '#' | tail -1 | tr -d '\r\n')
    echo ${screenType}:$d
  done  
fi

if [ "$1" = "prepForShutDown" ]; then
 $0 kill
 $0 command "$2" "P-"
 $0 command "$2" "9"
 sleep 4
 $0 command "$2" _
 $0 kill
#
# for ard in $($0 listDevices $2); do
#   $0 command 
#   (echo; echo 9; echo _; sleep 4) | cu -l /dev/$ard &
# done
# wait
fi

if [ "$1" = "getMaster" ]; then
 if ! screen -list | grep -q ATTACH; then
    #$0 kill
    $0 detached;
	sleep 1;
 fi
  # send the B command
  for i in $(screen -Q windows | tr -d -- "-*&%:(L)" | tr " " : | sed -e 's/::/\n/g'); do
    if [[ ${i#*:} =~ $ARDTTY_PATTERN ]]; then
        screen -X at ${i%:*} stuff "B\n";
    fi
  done
  # wait a sec
  sleep 0.5;
  # read who is master and who is slave
  for i in $(screen -Q windows | tr -d -- "-*&%:(L)" | tr " " : | sed -e 's/::/\n/g'); do
    if [[ ${i#*:} =~ $ARDTTY_PATTERN ]]; then
        screenType=$(screen -X at ${i%:*} hardcopy -h /tmp/.hardcopy; cat /tmp/.hardcopy |grep -a "I am" | tr " " "\n" | grep -E '(slave|master)' | tail -1);
        
        #echo ${i%:*} ${i#*:} is $screenType
        if [ "$screenType" == "master" ]; then
        	masterScreen=${i%:*}
        fi
        rm /tmp/.hardcopy
    fi
  done
  echo $masterScreen
fi	

if [ "$1" = "getIDs" ]; then
  masterScreen=$($0 getMaster)
  screen -X at ${masterScreen} stuff "i\n";
  # wait a sec
  sleep 0.5;
  # read who is master and who is slave
  for i in $(screen -Q windows | tr -d -- "-*&%:" | tr " " : | sed -e 's/::/\n/g'); do
    if [[ ${i#*:} =~ $ARDTTY_PATTERN ]]; then
        screenType=$(screen -X at ${i%:*} hardcopy -h /tmp/.hardcopy; cat /tmp/.hardcopy |grep -a "I am" | tr " " "\n" | grep -E "#" | tail -1); 
        echo "${screenType}:${i}"
        rm /tmp/.hardcopy
    fi
  done
fi	

if [ "$1" = "control" ]; then

  readarray -t -d "|" options <<< $( cat Plummet.ino | grep "case '" | grep // | sed s/\ *case\ \'//g | sed s_\':\ //_:_g | sed -e "s:\":\\\":g" | tr -d "\t" |  awk -F ':' '{print t $1 "|" $2 } {t="|"}' | sed 's:| :|:g' )
  options+=(":" "Special (try me out)")
  cmd=""
  while : ; do
	 sttys=($(stty size))
	 layout=vertical
	 if [ ${sttys[0]} -lt 20 ]; then
	 		screen -X layout select horizontal
	 fi
	 if [ ${sttys[1]} -lt 30 ]; then
	 		screen -X layout select vertical
	 fi
    cmd=$(whiptail --title "Plummet 2.0 ($HOSTNAME)" --nocancel --default-item "${cmd}" --menu "Choose an option:" 0 56 0 "${options[@]}"  3>&2 2>&1 1>&3 )
        
    if [[ "$cmd" =~ [AM=:] ]]; then
		for index in "${!options[@]}"; do
      		if [[ "${options[$index]}" = "${cmd}" ]]; then
       			break;
     		fi
    	done
    	title="$cmd ${options[$index+1]}"
    	if [ "$cmd" == ":" ]; then
    		helpInfo=". Examples:\n :0:9  =>  Send 9 to the master\n :1:9  => Send 9 to the 2nd slave\n :e:h  => Send h to even arduinos\n :o:h  => Send h to odd arduinos\n :w:}} => Send '}}' to master,\n      '}}}}' to next arduino and\n      '}}}}}}' to the following one\n"
    	else
    		helpInfo=""
    	fi

    	cmd=$(whiptail --title "${title}" --nocancel --inputbox "Enter arguments${helpInfo}" 0 40 "$cmd" 3>&2 2>&1 1>&3 )
   	fi

    if [ "$masterScreen" == "" ]; then 
       masterScreen=$($0 getMaster)
    fi
    screen -X at $masterScreen stuff "${cmd}\n"
  done
fi

if [ "$1" = "ml" ]; then
  echo "<html><head> <script src='https://cdn.plot.ly/plotly-latest.min.js'></script>"
  echo "<script>function loadPlot() {"

  echo -n " a = ["; grep -a Machine $2 | cut -c 30- | strings | tr -d "f(,)=ms" | cut -d" " -f1 | xargs | tr " " , | tr -d "\n" ; echo "]"
  echo -n " b = ["; grep -a Machine $2 | cut -c 30- | strings | tr -d "f(,)=ms" | cut -d" " -f2 | xargs | tr " " , | tr -d "\n" ; echo "]"
  echo -n " c = ["; grep -a Machine $2 | cut -c 30- | strings | tr -d "f(,)=ms" | cut -d" " -f4 | xargs | tr " " , | tr -d "\n" ; echo "]"
  echo -n " r= ["; grep -a Machine $2 | cut -c 30- | strings | tr -d "f(,)=ms" | cut -d" " -f5 | xargs | tr " " , | tr -d "\n" ; echo "]"

  echo "c2 = c.map((x,i) => (a[i]>0 && a[i]<0.48 && b[i]>0 && b[i]<40) ? (c[i]+c[i+1]+c[i-1]+c[i+21]+c[i-21] )/5 : c[i])"
  echo "c=c2"

  echo "x = a.map((x,i) => b[i]*Math.cos(x*2*Math.PI))"
  echo "y = a.map((x,i) => b[i]*Math.sin(x*2*Math.PI))"
  echo "a = x; b=y"
  echo "a24 = a.filter((x,i) => r[i]<0.25)"
  echo "a25 = a.filter((x,i) => r[i]==0.25)"
  echo "a26 = a.filter((x,i) => r[i]>0.25)"
  echo "b24 = b.filter((x,i) => r[i]<0.25)"
  echo "b25 = b.filter((x,i) => r[i]==0.25)"
  echo "b26 = b.filter((x,i) => r[i]>0.25)"
  echo "c24 = c.filter((x,i) => r[i]<0.25)"
  echo "c25 = c.filter((x,i) => r[i]==0.25)"
  echo "c26 = c.filter((x,i) => r[i]>0.25)"


  echo "var data= { opacity:1, intensity:r, type: 'mesh3d', x: a, y: b, z: c, colorscale: [['0.0', 'black'],['0.3','blue'], ['0.5','green'],['0.7','orange'],['1.0','red']] } ;"
  echo "var data24= { mode:'markers', marker: {opacity:0.3, color:'black',size:1,line:{width:0}}, type: 'scatter3d', x: a24, y: b24, z: c24 } ;"
  echo "var data25= { mode:'markers', marker: {opacity:0.5, color:'rgb(0,255,0)',size:3,line:{width:0}}, type: 'scatter3d', x: a25, y: b25, z: c25 } ;"
  echo "var data26= { mode:'markers', marker: {opacity:1, color:'rgb(255,100,100)',size:1,line:{width:0}}, type: 'scatter3d', x: a26, y: b26, z: c26 } ;"
  echo "var layout = { autosize: false, width: document.body.clientWidth, height: document.body.clientHeight, margin: { l: 0, r: 0, b: 0, t: 0, pad: 0 }, paper_bgcolor: '#ffffff', plot_bgcolor: '#f0f0f0' };"
  echo " Plotly.newPlot('myDiv', [data, data24, data25, data26], layout);"
  echo "}</script></head>"
  echo "<body onload='loadPlot()'> <div id='myDiv'><!-- Plotly chart will be drawn inside this DIV --></div>"
  echo "</body></html>"

fi

if [ "$1" = export ]; then
	masterScreen=$($0 getMaster)
	if [ "$masterScreen" = "" ]; then
		echo "No Master Screen"
		exit -7
	fi
	screen -X at $masterScreen stuff "PP\n"
	sleep 1
	screen -X at $masterScreen hardcopy -h /tmp/PP
	sleep 1
	mkdir -p Exports
	cat /tmp/PP |tail  +$(cat /tmp/PP | awk '/Recorded Commands/ {i=NR} END {print i}') | grep ^RR > ${2:-$(date +Exports/Record_%Y_%m_%d-%H:%M.txt)}
fi

if [ "$1" = import ]; then
	fname=${2:-$(ls Exports/* | sort | tail -1)}
	masterScreen=$($0 getMaster)
	if [ "$masterScreen" = "" ]; then
		echo "No Master Screen"
		exit -7
	fi
	cat $fname | while read p; do
		if [[ "$p" = RR* ]]; then
			echo "$p"
			screen -X at $masterScreen stuff "${p}\n"
			sleep 0.2
		fi
	done
	$0 export /tmp/test
	diff /tmp/test $fname
	exit $?
fi

if [ "$1" = editPlayback ]; then
	mkdir -p Exports
	fname=${2:-$(date +Exports/Record_%Y_%m_%d-%H:%M.txt)}
	$0 export $fname
	pico $fname

	if (( 0 < $(stat -c %Y-%X $fname | bc) )); then
	   $0 import $fname
	else 
		whiptail --title "Operation Canceled" --msgbox "Playback was not changed" 8 30
	fi
fi


if [ "$1" = "getMasterArd" ]; then
	$0 listDevicesHelper | grep ^#0 | cut -d: -f 2
fi

if [ "$1" = "morningShow" ]; then
	echo $(date) morningShow >> $LOGFILE
	#$0 kill
	masterArd=$($0 getMasterArd)
	echo "Master=" $masterArd
	# (echo Y+ ; echo P+; sleep 3) | cu -l /dev/$masterArd -s $BAUD_RATE  
	$0 command "$masterArd" "Y+"
	$0 command "$masterArd" "P+"
fi

if [ "$1" = "nightShow" ]; then
	echo $(date) nightShow >> $LOGFILE
	##$0 kill
	masterArd=$($0 getMasterArd)
	echo "Master=" $masterArd
	
	# (echo Y- ; sleep 3) | cu -l /dev/$masterArd -s $BAUD_RATE  
	$0 command "$masterArd" "Y-"
fi

if [ "$1" = "history" ]; then
    #git log --pretty=format:"%h %ad | %s%d" --graph --date=short | grep "^* \w" | cut -c 3- 
    readarray -t -d "|" options <<< $( git log --pretty=format:"%h %ad | %s%d" --date=short | tr "\n" "|" )
    #unset 'options[${#options[@]}-1]'
    verAndDate=$(whiptail --title "Plummet history" --menu "Choose an option:" --ok-button "Reload" 0 56 0 "${options[@]}"  3>&2 2>&1 1>&3 )
    if [[ ! -z "$verAndDate" ]] && (whiptail --title "Reloading older version" --yesno "Are you sure you want to reload older version: $verAndDate" 8 78); then 
        ver=${verAndDate%% *}
        git checkout $ver -- Plummet.ino

        $0 compile && git checkout master -- Plummet.ino && $0 upload
    fi
fi

if [ "$1" = "networkTest" ]; then
 host1=http://google.com
 host2=http://facebook.com
 echo -n $(date) "Checking for internet connectivity..." | tee -a $LOGFILE
 wget -q --tries=10 --timeout=20 --spider $host1
 if [[ $? -eq 0 ]]; then
         echo $host1 " Online" | tee -a $LOGFILE
   exit
 else
   (>&2 echo $(date) "error " $host1 " offline")
         echo $host1 " Offline" | tee -a $LOGFILE
 fi
 echo -n $(date) "Checking secondary host..." | tee -a $LOGFILE
 wget -q --tries=10 --timeout=20 --spider $host2
 if [[ $? -eq 0 ]]; then
   echo $host2 " Online" | tee -a $LOGFILE
   exit
 else
   (>&2 echo $(date) "error " $host2 " offline")
   echo $host2 " Offline" | tee -a $LOGFILE
 fi

 if [ $(grep Checking $LOGFILE | tail -4 | grep Offline | wc -l) == 4 ]; then
    echo "Would recommend restart" | tee -a $LOGFILE
 fi
fi

if [ "$1" = "command" ]; then
 if ! screen -list | grep -q ATTACH; then
    #$0 kill
    $0 detached;
 fi
 for ard in $($0 listDevices $2); do  
   #stty -F /dev/${ard} cs8 $BAUD_RATE ignbrk -brkint -icrnl -imaxbel -opost -ocrnl -onlret -isig -icanon -iexten -echo -echoe -echok -echoctl -echoke -noflsh -ixon -crtscts
   #screen -d -m -t $ard /dev/$ard;
   screen -X at $ard stuff "\n5555555555\n${3}\n";
   sleep 1 
   screen -X at $ard hardcopy -h /tmp/.hardcopy.$ard;
   tac /tmp/.hardcopy.$ard | awk 'NF {p=1} p' | sed '/5555555555/Q' | tac 
   rm /tmp/.hardcopy.$ard
 done;
fi


