#! /bin/bash

ARDLIB=/home/pi/arduino-1.8.10

ARDTTY_PATTERN="tty(USB|ACM)"

if [ $# -eq 0 ]; then
 whiptail --textbox Plummet.txt 25 78

 while : ; do
   cmd=$(whiptail --title "Plummet 2.0" --menu "Choose an option:" 25 78 16 \
         "Attach" "View and control connected Arduinos." \
         "Upload" "Upload app to the connected Arduinos." \
         "Upload Loop" "Continuesly upload to Arduinos." \
         "List Connections" "Show wiring instructions." \
         "List Devices" "Show all connected Arduinos." \
         "List Commands" "Show list of commands." \
         "Update" "Update app from the internet." \
         "Compile" "Compile the Arduino code." \
         "Setup" "First time setup." 3>&2 2>&1 1>&3 )

   [ "$cmd" = "" ] && break;
   cmd="${cmd// /}";
   cmd="${cmd,}"
   
   case "$cmd" in 
     attach)
        $0 $cmd 
     ;;
     upload | uploadLoop | compile | setup | update )
        $0 $cmd $([ "$cmd" = "compile" ] && echo -verbose ) 2>&1 | tee /tmp/output | awk -W interactive 'BEGIN {i=1;status=""} {if ($0 != "") status=$0; printf "XXX\n%d\n%s\nXXX\n",i,status; i=i+1}' |whiptail --title "$cmd" --gauge "$cmd" 6 60 0
        if [ ${PIPESTATUS[0]} != 0 ]; then
            whiptail --title "There was an error" --scrolltext --textbox /tmp/output 25 78
        fi
     ;;
     *)
       whiptail --scrolltext --textbox /dev/stdin 25 78 <<<"$($0 $cmd | tr -d '\r')" 
     ;;
   esac
   echo "Type ./Plummet to restart the program"
 done
fi
if [ "$1" = "test" ] ; then
 echo 1
 sleep 1
 echo 2
 sleep 1
 ls -l /dev
 exit 2
fi
if [ "$1" = "help" ] ; then
 echo "Use args attach, upload, upload_loop, listConnections, listDevices, listCommands, update, compile, install, cua"
fi

if [ "$1" = "cua" ] ; then
 $0 compile && $0 upload $2 && $0 attach $2
fi

if [ "$1" = "cu" ] ; then
 $0 compile && $0 upload $2
fi

if [ "$1" = "install" ]; then
 command -v inotifywait > /dev/null || sudo apt-get install inotify-tools
 command -v screen > /dev/null || sudo apt-get install screen
 command -v cu > /dev/null || sudo apt-get install cu
#sudo apt-get  install avahi-daemon
 #curl -L -o arduino-1.8.10-linuxarm.tar.xz https://www.arduino.cc/download.php?f=/arduino-1.8.10-linuxarm.tar.xz
 #tar -xf arduino-1.8.10-linuxarm.tar.xz 
fi

if [ "$1" = "compile" ]; then
 echo "Compiling Plummet"
 mkdir -p build
 ${ARDLIB}/arduino-builder -hardware ${ARDLIB}/hardware -tools ${ARDLIB}/hardware/tools/avr -tools ${ARDLIB}/tools-builder -libraries ${ARDLIB}/libraries -libraries Libraries -fqbn arduino:avr:uno -prefs=compiler.path=${ARDLIB}/hardware/tools/avr/bin/ -prefs=tools.ctags.path=${ARDLIB}/tools-builder/ctags/5.8-arduino11 -build-path build $2 Plummet.ino 
 exit $? 
fi

if [ "$1" = "upload" ]; then
 $0 kill
 echo "Uploading Plummet to ${2:-all connected devices}"
 for ard in $($0 listDevices $2); do
   echo "uploading to $ard"
   ${ARDLIB}/hardware/tools/avr/bin/avrdude -C${ARDLIB}/hardware/tools/avr/etc/avrdude.conf -patmega328p -carduino -P/dev/${ard} -b115200 -Uflash:w:build/Plummet.ino.hex:i -F &
 done
 wait
fi

if [ "$1" = "upload_loop" ]; then
 $0 upload $2
 echo "Continuesly uploading to any arduino that will be attached (Press Ctrl+C to stop)"
 inotifywait -m /dev -e create -e moved_to |
    while read path action ard; do
        if [[ $ard =~ $ARDTTY_PATTERN ]]; then # && [ $action = "CREATE" ]; then
           echo "New arduino connection detected ($ard)"
           $0 upload $ard
        fi
    done
fi

if [ "$1" = "update" ]; then
 echo Updating app from the internet
 gitresults="$(git pull)"
 if [ "$gitresults" = "Already up-to-date." ] || [ "$gitresults" = "Already up to date." ]; then 
   echo "Already up to date."
 else
   $0 compile
 fi
 exit $?
fi

if [ "$1" = "listConnections" ]; then
 cat Plummet.ino | cut -c 3- | awk 'BEGIN {p=1} /Help/ {p=0} (p==1) {printf "%s\r\n" , $0} '
fi

if [ "$1" = "listCommands" ]; then
 cat Plummet.ino | grep "case '" | sed s/case\ \'//g | sed s_\':\ //_:_g | awk 'BEGIN {printf " AvailableCommands:\r\n";} {printf "%s\r\n", $0} END {printf "  <Tab> or <Shift-Tab>: switch between tabs\r\n  <Esc>: quit\r\n"}'
fi

if [ "$1" = "attach_old" ]; then
 ard=$($0 listDevices $2| tail -1)
 if [ "$ard" == "" ]; then
   echo "No device matched attached. Following are the devices connected:"
   $0 listDevices
   exit 1
 fi 
 echo "Connecting to ${ard}:"

 $0 listCommands > $(cat /tmp/screen${ard})

 #stty -F /dev/${ard} cs8 38400 ignbrk -brkint -icrnl -imaxbel -opost -ocrnl -onlret -isig -icanon -iexten -echo -echoe -echok -echoctl -echoke noflsh -ixon -crtscts
 stty -F /dev/${ard} raw -echo -echoe -echok -echoctl -echoke

 screen -R -S ${ard} /dev/${ard} 9600

 #screen -R -S ${ard} bash -c 'tty > /tmp/screen${ard}; '$0' listCommands; cu -l /dev/'${ard}' -s 38400'
 #screen -R -S ${ard} bash -c 'tty > /tmp/screen${ard}; '$0' listCommands; tail -f /dev/'${ard}' &; cat > /dev/'${ard}
 # ~. to quit CU process
fi

if [ "$1" = "attach" ]; then
 $0 kill
 echo 'bindkey -k kB focus prev' > /tmp/.screens
 echo 'bindkey "	" focus next' >> /tmp/.screens
 echo 'bindkey "`" detach' >> /tmp/.screens
 echo 'bindkey "\033" detach' >> /tmp/.screens
 echo 'bindkey "^[[1;2A" focus up' >> /tmp/.screens
 echo 'bindkey "^[[1;2B" focus down' >> /tmp/.screens
 echo 'bindkey "^[[1;2C" focus right' >> /tmp/.screens
 echo 'bindkey "^[[1;2D" focus left' >> /tmp/.screens
 echo 'mousetrack on' >> /tmp/.screens
 isFirst=1
 for ard in $($0 listDevices $2); do
   stty -F /dev/${ard} cs8 38400 ignbrk -brkint -icrnl -imaxbel -opost -ocrnl -onlret -isig -icanon -iexten -echo -echoe -echok -echoctl -echoke noflsh -ixon -crtscts
   if [ "$isFirst" = "0" ]; then
      echo split >> /tmp/.screens
      echo focus >> /tmp/.screens
   fi
   echo screen /dev/${ard} >> /tmp/.screens
   echo stuff "e\nB\n \n" >> /tmp/.screens
   if [ "$isFirst" = "1" ]; then
      echo split -v >> /tmp/.screens
      echo focus >> /tmp/.screens
      #echo screen bash -c '"' $0 listCommands ';' cat  '"' >> /tmp/.screens
      echo screen -t Help bash -c '"' $0 listCommands '|' less -S -# 5 '"' >> /tmp/.screens
      echo resize -h 30 >> /tmp/.screens
      echo focus prev >> /tmp/.screens
   fi
   isFirst=0
 done;
 echo "hardstatus alwayslastline" >> /tmp/.screens
 echo "hardstatus string 'Press <Esc> to quit'" >> /tmp/.screens
 echo "focus top" >> /tmp/.screens
 screen -c /tmp/.screens
 $0 kill
 #screen -R -S ${ard} bash -c 'tty > /tmp/screen${ard}; '$0' listCommands; cu -l /dev/'${ard}' -s 38400'
 #screen -R -S ${ard} bash -c 'tty > /tmp/screen${ard}; '$0' listCommands; tail -f /dev/'${ard}' &; cat > /dev/'${ard}
 # ~. to quit CU process
fi

if [ "$1" = "kill" ]; then
while [ $(screen -ls | grep '(' | wc -l) -gt 0 ]; do screen -S $(screen -ls | grep '(' | head -1 | cut -d. -f 1) -X kill; sleep 0.1; done
fi

if [ "$1" = "listDevices" ]; then
 find /dev/ -type c -regextype "posix-extended" -iregex '/dev/('${2}'|'${ARDTTY_PATTERN}${2}'.*)' | cut -c 6- 
fi



