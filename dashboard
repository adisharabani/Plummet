#! /bin/bash
echo "Content-type: text/html"
echo ""
#set -x 

cd /home/pi/Plummet
p=(${1//=/ })
key=${p[0]}
value=${p[1]}


#echo "${morningCron[@]}"
#echo "${nightCron[@]}"


if [ "$key" = "update" ]; then
	if [[ "$value" =~ ^/?,?[0-9]+,[0-9]+,_,[0-6]-[0-6]:/?,?[0-9]+,[0-9]+,_,[0-6]-[0-6]$ ]]; then
	morningCron=$(echo "${value}" | tr "/:" "#\n" | head -1 | sed 's/_/\* \*/' | sed -e 's_$_ cd ~/Plummet \&\& ./Plummet morningShow_' | tr "," " ")
	nightCron=$(echo "${value}" | tr "/:" "#\n" | tail -1 | sed 's/_/\* \*/' | sed -e 's_$_ cd ~/Plummet \&\& ./Plummet nightShow_' | tr "," " ")
	#echo "$morningCron"
	#echo "$nightCron"
	(crontab -l 2>/dev/null | grep -v morningShow | grep -v nightShow; echo "$morningCron"; echo "$nightCron" ) | crontab -
	echo Updated
	else
		echo Error "$value"
	fi
elif [ "$key" = "command" ] ;then 
	./Plummet kill;
	./Plummet detached;
#rm /tmp/.h 
#set -x
#screen -p0 -X at ttyUSB3 hardcopy -h /tmp/.h 2>&1
#cat /tmp/.h 2>&1
#ls -l /tmp/.h 2>&1
	echo "<pre>"
	echo "running command $value"
	if [ "$value" = "clear" ]; then
		mv tty*.record ../
		sleep 3;
		./Plummet record_detached
		echo Done
		exit
	fi
	if [ "$value" = "showML" ]; then
		./Plummet command "" "&"
		exit
	fi
	masterArd=$(./Plummet getMasterArd)
	echo masterArd=$masterArd
	if [ "$value" = "startup" ]; then
		./Plummet command "$masterArd" "Y+\nP+"
	fi
	if [ "$value" = "shutdown" ]; then
		./Plummet command "$masterArd" "Y-\nP-"
		./Plummet command "$masterArd" "9"
	fi
	if [ "$value" = "detached_record" ]; then
		./Plummet detached_record
	fi
	if [ "$value" = "ongoing_stop" ]; then
		./Plummet command "$masterArd" "9"
		sleep 5
		./Plummet command "$masterArd" "2"
	fi
	if [ "$value" = "5" ]; then
		./Plummet command "$masterArd" "5"
	fi

else 
 morningCron=($(crontab -l 2>/dev/null | grep morningShow | sed 's:#:# :' | sed 's:^\s*[^#]:checked \0:' | sed 's/  */ /g' | cut -d" " -f 1,2,3,6 | tr "-" " " ))
 nightCron=($(crontab -l 2>/dev/null | grep nightShow | sed 's:#:# :' | sed 's:^\s*[^#]:checked \0:' | sed 's/  */ /g' | cut -d" " -f 1,2,3,6 | tr "-" " " ))




 cat << EOF

<html>
<head>
<style>
ilabel {display:inline-block !important;float:left}
iinput {display:inline-block;float:left}

iframe { height:200px; width:100%;}
</style>

<script>
function command(cmd) {
 var t = event.target;
 var frm = document.getElementById("frm")

 t.disabled=true;
 frm.onload = ()=>{t.disabled=false;if (cmd=="clear") document.location.reload()}
 frm.src = "?command="+cmd
}


function updateSchedule() {
	var cronStart = (autostart.checked ? "" : "/," ) + 
		parseInt(autostart_time.value.split(":")[1]) + "," +
		parseInt(autostart_time.value.split(":")[0]) +
		",_," +
		autostart_day_from.selectedIndex + "-" +
		autostart_day_to.selectedIndex
	
	var cronStop = (autostop.checked ? "" : "/," ) + 
		parseInt(autostop_time.value.split(":")[1]) + "," +
		parseInt(autostop_time.value.split(":")[0]) +
		",_," +
		autostop_day_from.selectedIndex + "-" +
		autostop_day_to.selectedIndex

	//alert("?update="+cronStart+":"+cronStop)
	frm.src = ("?update="+cronStart+":"+cronStop)
}


function play() {
  datasets = []
  c.data.datasets.forEach((dataset) => {datasets.push(dataset.data); dataset.data = []})
  playInterval = setInterval(playOne,500);
}
function playOne() {
  var had_data = false;
  for (var i=0; i<datasets.length; i++) {
     var d = datasets[i].shift()
     if (d) {had_data = true; c.data.datasets[i].data.push(d)}
  }
  if (had_data == false) clearInterval(playInterval)
 c.update()
}

</script>
</head>
<body>
<h1>$HOSTNAME</h1>
EOF
if [ "$key" = "analyze" ]; then
  echo "<canvas id='myChart'></canvas>"
  echo "<button onclick='play()'>play</button>"
  echo "<button onclick='command(\"detached_record\")'>record</button>"
  echo "<button onclick='command(\"clear\")'>clear</button>"
  echo "<button onclick='command(\"showML\")'>show ML data</button>"
  echo "<script src='https://cdn.jsdelivr.net/npm/chart.js@2.8.0'></script>"
  echo "<script>"
  echo "var ctx = document.getElementById('myChart').getContext('2d');"
  echo "var colors = ['#cc9999','#99cc99','9999cc','#cccc99']"
 #echo "var c = new Chart(ctx, {type:'scatter', options:{scales:{xAxes: [{scaleLabel:{display:true, labelString:'as'}}]}, data:{datasets:["
  echo "var c = new Chart(ctx, {type:'scatter', options:{scales:{xAxes: [{scaleLabel:{display:true,labelString:'offset [ms]'}}], yAxes:[{scaleLabel:{display:true,labelString:'ropeAngle'}}]}}, data:{datasets:["
  #for device in $(./Plummet listDevicesHelper); do
  for device in $(./Plummet listDevices | sort); do
    ard="${device#*:}"
    pot0=$(grep -a POT0 ${ard}.record | wc -l)
    if [ "$pot0" -gt 0 ]; then 
	errors=" - $pot0 POT0 errors!";
    else 
	errors=""
    fi
    echo -n "{label: '$device$errors', backgroundColor:colors.pop(), showLine:true,fill:false,borderWidth:1,data : ["
    #cat -v ${ard}.record | sed 's:^M::g' | awk '(/MachineLearning 0.[2-3]/ && (nl ~ "nL=1")) {print "{x:" $6 "y:" $7 "},"} /=> servoAmp/ {nl=$5;}'  | tr -d "ms()\n" 
    #grep -a "MachineLearning 0.[2-5].*\* MLData" ${ard}.record | cut -d" " -f 6,7 | awk '{print "{x:" $1 "y:" $2 "},"}' | tr -d "ms()\n"
    #cat -v ${ard}.record | sed 's:\^M:\n:g' | awk '(/MachineLearning .*\* MLData/ && (nl ~ "nL=1")) {print "{x:" o ",y:" r "},"} /=> servoAmp/ {nl=$5;} /^\^\[\[0;31m\[[0-9]*\]/ {gsub("[=()]"," "); o=$5; r=$7;}' | tr -d "ms\n"
    #cat -v ${ard}.record | sed -e 's:~M\([^^]*^[^M]\)*[^^]*^M::g'| sed 's:\^M:\n:g' | awk '/MachineLearning .*\* MLData/  {print "{x:" o ",y:" r "},"} /^\^\[\[0;31m\[[0-9]*\]/ {gsub("[=()]"," "); o=$5; r=$7;}' | tr -d "ms\n"
    cat -v ${ard}.record | sed -e 's:~M\([^^]*^[^M]\)*[^^]*^M::g'| sed 's:\^M:\n:g' | awk '(/MachineLearning .*\* MLData/ && (o ~ /^[0-9.-]+ms$/) && (r ~ /^[0-9.-]+$/))  {print "{x:" o ",y:" r "},"} /^\^\[\[0;31m[0-9]*|\?\[[0-9]*\]/ {gsub("[=()]"," "); o=$5; r=$7;}' | tr -d "ms\n"
    echo "]},"
  done
  echo "]}})"
  echo "</script>"
fi
cat <<EOF
<button onclick="command('startup')">Startup</button>

<button onclick="command('shutdown')">Shutdown</button>
<br><br>
<input type=checkbox id=autostart ${morningCron[0]}/><label for=autostart>Auto Start </label>
<select id=autostart_day_from><option value=0>Sun</option><option value=1>Mon</option><option value=2>Tue</option><option value=3>Wed</option><option value=4>Thu</option><option value=5>Fri</option><option value=6>Sat</option></select>
to
<select id=autostart_day_to><option value=0>Sun</option><option value=1>Mon</option><option value=2>Tue</option><option value=3>Wed</option><option value=4>Thu</option><option value=5>Fri</option><option value=6>Sat</option></select>
at
<input type=time id=autostart_time min="00:01" max="23:59" value="$(printf "%02d" ${morningCron[2]}):$(printf "%02d" ${morningCron[1]})"/>
<br><br>
<input type=checkbox id=autostop ${nightCron[0]}><label for=autostop>Auto Stop </label>
<select id=autostop_day_from><option value=0>Sun</option><option value=1>Mon</option><option value=2>Tue</option><option value=3>Wed</option><option value=4>Thu</option><option value=5>Fri</option><option value=6>Sat</option></select>
to
<select id=autostop_day_to><option value=0>Sun</option><option value=1>Mon</option><option value=2>Tue</option><option value=3>Wed</option><option value=4>Thu</option><option value=5>Fri</option><option value=6>Sat</option></select>
at
<input type=time id=autostop_time min="00:01" max="23:59" value="$(printf "%02d" ${nightCron[2]}):$(printf "%02d" ${nightCron[1]})">

<button onclick="updateSchedule()">update schedule</button>
<iframe id=frm ></iframe>

<script>
autostart_day_from.selectedIndex = "${morningCron[3]}"
autostart_day_to.selectedIndex = "${morningCron[4]}"
autostop_day_from.selectedIndex = "${nightCron[3]}"
autostop_day_to.selectedIndex = "${nightCron[4]}"
</script>


</body>
</html>
EOF


fi


# ./Plummet getMasterArd
# ./Plummet command "" 5

