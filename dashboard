#! /bin/bash
echo "Content-type: text/html"
echo "Access-Control-Allow-Origin: *"
echo ""
#set -x 

cd /home/pi/Plummet

args=(${1//&/ })
p=(${args[0]//=/ })
key=${p[0]}
value=${p[1]}
p=(${args[1]//=/ })
key2=${p[0]}
value2=${p[1]}

#echo "${morningCron[@]}"
#echo "${nightCron[@]}"


if [ "$key" = "update" ]; then
	if [[ "$value" =~ ^/?,?[0-9]+,[0-9]+,_,[0-6]-[0-6]:/?,?[0-9]+,[0-9]+,_,[0-6]-[0-6]$ ]]; then
	morningCron=$(echo "${value}" | tr "/:" "#\n" | head -1 | sed 's/_/\* \*/' | sed -e 's_$_ cd ~/Plummet \&\& ./Plummet morningShow_' | tr "," " ")
	nightCron=$(echo "${value}" | tr "/:" "#\n" | tail -1 | sed 's/_/\* \*/' | sed -e 's_$_ cd ~/Plummet \&\& ./Plummet nightShow_' | tr "," " ")
	#echo "$morningCron"
	#echo "$nightCron"
	(crontab -l 2>/dev/null | grep -v morningShow | grep -v nightShow; echo "$morningCron"; echo "$nightCron" ) | crontab -
	echo Updated
	else
		echo Error "$value"
	fi
elif [ "$key" = "command" ] ;then 
	#./Plummet kill;
	#./Plummet detached;
#rm /tmp/.h 
#set -x
#screen -p0 -X at ttyUSB3 hardcopy -h /tmp/.h 2>&1
#cat /tmp/.h 2>&1
#ls -l /tmp/.h 2>&1
	echo "<pre>"
	echo "running command $value"
	if [ "$value" = "clear" ]; then
		cp tty*.record ../
		rm tty*.record
		sleep 1;
		echo Done
		exit
	fi
	if [ "$value" = "showML" ]; then
		./Plummet command "" "&"
		exit
	fi
	masterArd=$(./Plummet getMasterArd)
	echo masterArd=$masterArd
	if [ "$value" = "startup" ]; then
		./Plummet command "$masterArd" "Y+\nP+"
	fi
	if [ "$value" = "shutdown" ]; then
		./Plummet command "$masterArd" "Y-\nP-"
		./Plummet command "$masterArd" "9"
	fi
	if [ "$value" = "detached_record" ]; then
		./Plummet detached_record
	fi
	if [ "$value" = "ongoing_stop" ]; then
		./Plummet command "$masterArd" "9"
		sleep 5
		./Plummet command "$masterArd" "2"
	fi
	if [ "$value" = "5" ]; then
		./Plummet command "$masterArd" "5"
	fi

elif [ "$key" = "analyze" ] && [ "$value" = "datasets" ]; then
  echo -n "{"
  isFirst=1
  for device in $(./Plummet listDevices | sort); do
    [ $isFirst = "0" ] && echo "],"
    isFirst=0
    ard="${device#*:}"
    ardNumber=$(tac ${ard}.record 2>/dev/null  |grep -a -m 1 "I am" | cut -d# -f2 | tr -d " \r\n")
    echo -n "\"#${ardNumber}:$ard\" : ["
    [ "$key2" = "options" ] && [[ "$value2" == *"absolute"* ]] && absolute=1

    if [ "$key2" = "options" ] && [[ "$value2" == *"reload"* ]]; then
	tail -10000 ${ard}.record 2>/dev/null | cat -v | sed -e 's:~M\([^^]*^[^M]\)*[^^]*^M::g'| sed 's:\^M:\n:g' | awk -v absolute=$absolute 'BEGIN{first=1} /^\^\[\[0;31m[0-9]*|\?\[[0-9]*\]/ {gsub("[=()|]|;31m|ms"," "); if (($7 ~ /^[0-9.-]+$/) && ($9 ~ /^[0-9.-]+$/)) {if (first==0) print "},"; first = 0; print "{\"x\":" (int($7)+absolute*int($5)) ",\"y\":" $9; __id=$2; }} END {if (__id) print ",\"__id\":" __id "}"}'| tr -d "\n" | sed 's:,$::g'

    else 
tail -100 ${ard}.record 2>/dev/null | cat -v| sed -e 's:~M\([^^]*^[^M]\)*[^^]*^M::g'| sed 's:\^M:\n:g' | awk -v absolute=$absolute '/^\^\[\[0;31m[0-9]*|\?\[[0-9]*\]/ {gsub("[=()|]|;31m|ms"," "); if (($7 ~ /^[0-9.-]+$/) && ($9 ~ /^[0-9.-]+$/)) {print "{\"x\":" (int($7)+absolute*int($5)) ",\"y\":" $9 ",\"__id\":" $2 "},"}} '| tail -10 | tr -d "\n" | sed 's:,$::g'

    fi
  done
  [ $isFirst = "0" ] && echo -n "]"
  echo -n "}"


else 
 morningCron=($(crontab -l 2>/dev/null | grep morningShow | sed 's:#:# :' | sed 's:^\s*[^#]:checked \0:' | sed 's/  */ /g' | cut -d" " -f 1,2,3,6 | tr "-" " " ))
 nightCron=($(crontab -l 2>/dev/null | grep nightShow | sed 's:#:# :' | sed 's:^\s*[^#]:checked \0:' | sed 's/  */ /g' | cut -d" " -f 1,2,3,6 | tr "-" " " ))




 cat << EOF

<html>
<head>
<style>
ilabel {display:inline-block !important;float:left}
iinput {display:inline-block;float:left}

iframe { height:200px; width:100%;}
</style>

<script>
function command(cmd) {
 var t = event.target;
 var frm = document.getElementById("frm")

 t.disabled=true;

 var frames = [frm];

 if ((cmd=="clear") | (cmd=="showML")) frames = document.getElementsByTagName("iframe")

 for (var f of frames) {
   	f.onload = ()=>{t.disabled=false;if (cmd=="clear") document.location.reload()}
 	f.src = f.getAttribute("dashboard") + "?command="+cmd
 }
}


function updateSchedule() {
	var cronStart = (autostart.checked ? "" : "/," ) + 
		parseInt(autostart_time.value.split(":")[1]) + "," +
		parseInt(autostart_time.value.split(":")[0]) +
		",_," +
		autostart_day_from.selectedIndex + "-" +
		autostart_day_to.selectedIndex
	
	var cronStop = (autostop.checked ? "" : "/," ) + 
		parseInt(autostop_time.value.split(":")[1]) + "," +
		parseInt(autostop_time.value.split(":")[0]) +
		",_," +
		autostop_day_from.selectedIndex + "-" +
		autostop_day_to.selectedIndex

	//alert("?update="+cronStart+":"+cronStop)
	frm.src = ("?update="+cronStart+":"+cronStop)
}


</script>
</head>
<body>
<h1>$HOSTNAME</h1>
EOF

if [ "$key" = "ml" ]; then
  echo " <script src='https://cdn.plot.ly/plotly-latest.min.js'></script>"

  echo "<div id=myDiv></div>"

  echo "<script>"
  echo "data = [" 
  cat -v ${value}.record | sed -e 's:~M\([^^]*^[^M]\)*[^^]*^M::g'| sed 's:\^M:\n:g' | awk '(/MachineLearning .* MLData/)  {gsub("[=:f(),ms]",""); print "[" $2 "," $3 "," $4 "," $5 "," ($6 +0.3) "],"}'
  echo "]"
  echo "rope_angle_input = data.map((d)=>d[0])"
  echo "phs = data.map((d)=>d[1])"
  echo "amp = data.map((d)=>d[2])"
  echo "loop_time = data.map((d)=>d[3])"
  echo "rope_angle = data.map((d)=>d[4])"
  echo "t = 0//0.1"
  echo "X = data.map((d)=>d[2]*Math.cos(d[1]*2*Math.PI-t))"
  echo "Y = data.map((d)=>d[2]*Math.sin(d[1]*2*Math.PI-t))"
  echo "x = phs//X"
  echo "y= amp//loop_time"
  echo "r = rope_angle.map((e,i)=>e-rope_angle_input[i]) //data.map((d)=>0)"
  echo "z = loop_time//rope_angle_input"


  echo "Plotly.newPlot('myDiv', [{mode:'markers',marker: {opacity:0.5, size:2, line:{width:0}},opacity:1, intensity: r, colorscale: [['0.290', 'orange'],['0.310','blue']], type:'scatter3d', x:x, y:y,z:z}], {width:1000, height:700, margin:{l:0,r:0,b:0, t:0, pad:0}});"

 echo "</script>"

fi

if [ "$key" = "analyze" ]; then
    
  echo "<canvas id='myChart'></canvas>"
  echo "<button onclick='toggleZoom()'>zoom</button>"
  echo "<button onclick='realtime()'>realtime</button>"
  echo "<button onclick='replay()'>replay</button>"
  #echo "<button onclick='command(\"detached_record\")'>record</button>"
  echo "<button onclick='command(\"clear\")'>clear</button>"
  echo "<button onclick='command(\"showML\")'>show ML data</button>"
  #echo "<script src='https://cdn.jsdelivr.net/npm/chart.js@2.8.0'></script>"
  echo "<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script> <script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script> <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@0.7.7"></script> "
  echo "<script>"
  echo "var ctx = document.getElementById('myChart').getContext('2d');"
  echo "var _colors = [ '#993333','#339933','#333399', '#cc9999','#99cc99','9999cc','#cccc99','#cc99cc','#99cccc']"
 #echo "var c = new Chart(ctx, {type:'scatter', options:{scales:{xAxes: [{scaleLabel:{display:true, labelString:'as'}}]}, data:{datasets:["
  echo "var c = new Chart(ctx, {type:'scatter', options:{"
  echo "plugins: {zoom: {pan: {enabled: true,mode:'xy'},zoom: {enabled: false, drag:true, mode: 'xy'}}},"
  echo "scales:{xAxes: [{scaleLabel:{display:true,labelString:'offset [ms]'}}], yAxes:[{scaleLabel:{display:true,labelString:'ropeAngle'}}]}}, data:{datasets:["
  #for device in $(./Plummet listDevicesHelper); do
  for device in $(./Plummet listDevices | sort); do
    ard="${device#*:}"
    ardNumber=$(grep -a -m 1 "I am" ${ard}.record  | cut -d# -f2 | tr -d " \r\n")
    pot0=$(grep -a POT0 ${ard}.record 2>/dev/null | wc -l )
    if [ "$pot0" -gt 0 ]; then 
	errors=" - $pot0 POT0 errors!";
    else 
	errors=""
    fi
    #echo -n "{deviceName: '#${ardNumber}:$ard', label: '$device$errors', backgroundColor:_colors.pop(), showLine:true,fill:false,borderWidth:1,data : []},"
  done
  echo "]}})"
  #echo "cleanChartMem();c.update()"
  echo "</script>"
  cat <<EOF
  <script>
function toggleZoom() {
  if (c.config.options.scales.xAxes[0].ticks.min==undefined) {
    c.config.options.scales.xAxes[0].ticks = {min:-150, max:150, stepSize:25}
    c.config.options.scales.yAxes[0].ticks = {min:0.27,max:0.33,stepSize:0.01}
  } else {
    c.config.options.scales.xAxes[0].ticks = {}
    c.config.options.scales.yAxes[0].ticks = {}
  }
    c.update()
}


function replay() {
  datasets = []
  c.data.datasets.forEach((dataset) => {datasets.push(dataset.data); dataset.data = []})
  replayInterval = setInterval(replayOne,500);
}
function replayOne() {
  var had_data = false;
  for (var i=0; i<datasets.length; i++) {
     var d = datasets[i].shift()
     if (d) {had_data = true; 
	c.data.datasets[i].data.push(d)
	c.data.datasets[i].pointRadius = c.data.datasets[i].data.map((e,index)=>(index<c.data.datasets[i].data.length-1)?2:10)
     }
  }
  if (had_data == false) clearInterval(replayInterval)
 c.update()
}
function cleanChartMem() {
  for (var i in c.data.datasets){
    c.data.datasets[i].data = c.data.datasets[i].data.map((e,i,a)=>(i==a.length-1) ? e : {x:e.x,y:e.y})
}

}
  function updateChartHelper(dashboardURL, reload) {
	var xhttp = new XMLHttpRequest();
	xhttp.onreadystatechange = function() {
	    if (this.readyState == 4 && this.status == 200) {
g=xhttp.responseText
		var datasets = JSON.parse(xhttp.responseText)
		for (var deviceName in datasets) {
			var newData = datasets[deviceName]
			var dataset = c.data.datasets.filter((x) => x.deviceName==deviceName)[0]
			if (dataset == undefined) {
				dataset = {deviceName: deviceName, label: deviceName, backgroundColor:_colors.pop(), showLine:true,fill:false,borderWidth:1,data : []};
    				c.data.datasets.push(dataset);
				c.data.datasets.sort((x,y)=>x.label>y.label)
			}
			if (reload) {
				dataset.data = newData;
			} else {
				var last_id = 0;
				if (dataset.data.length>0) last_id = dataset.data[dataset.data.length-1].__id
				if (last_id == undefined) last_id = 0;
				dataset.data.push(...newData.filter((x)=>x.__id > last_id))
	       			dataset.pointRadius = dataset.data.map((e,i)=>(i<dataset.data.length-1)?2:10)
			}
		}
		c.update()
	    }
	};
	var optionsMatch = document.location.search.match("options=([^&]*)");
	xhttp.open("GET", dashboardURL+ "?analyze=datasets&options=" + (reload ? "reload,":"") + (optionsMatch ? ","+optionsMatch[1] : ""), true);

	xhttp.send();

  }

function updateChart(reload) {
	updateChartHelper("",reload);
	
	otherURL=document.location.search.match("otherURL=([^&]*)");
	if (otherURL) {
		for (var u of otherURL[1].split(",")) {
			updateChartHelper(u,reload)
		}
	}
}

function realtime() {
	realtimeInterval = setInterval(updateChart,5000)
}


updateChart(true);

  </script>
EOF

fi
cat <<EOF
<button onclick="command('startup')">Startup</button>

<button onclick="command('shutdown')">Shutdown</button>
<br><br>
<input type=checkbox id=autostart ${morningCron[0]}/><label for=autostart>Auto Start </label>
<select id=autostart_day_from><option value=0>Sun</option><option value=1>Mon</option><option value=2>Tue</option><option value=3>Wed</option><option value=4>Thu</option><option value=5>Fri</option><option value=6>Sat</option></select>
to
<select id=autostart_day_to><option value=0>Sun</option><option value=1>Mon</option><option value=2>Tue</option><option value=3>Wed</option><option value=4>Thu</option><option value=5>Fri</option><option value=6>Sat</option></select>
at
<input type=time id=autostart_time min="00:01" max="23:59" value="$(printf "%02d" ${morningCron[2]}):$(printf "%02d" ${morningCron[1]})"/>
<br><br>
<input type=checkbox id=autostop ${nightCron[0]}><label for=autostop>Auto Stop </label>
<select id=autostop_day_from><option value=0>Sun</option><option value=1>Mon</option><option value=2>Tue</option><option value=3>Wed</option><option value=4>Thu</option><option value=5>Fri</option><option value=6>Sat</option></select>
to
<select id=autostop_day_to><option value=0>Sun</option><option value=1>Mon</option><option value=2>Tue</option><option value=3>Wed</option><option value=4>Thu</option><option value=5>Fri</option><option value=6>Sat</option></select>
at
<input type=time id=autostop_time min="00:01" max="23:59" value="$(printf "%02d" ${nightCron[2]}):$(printf "%02d" ${nightCron[1]})">

<button onclick="updateSchedule()">update schedule</button>
<iframe id=frm dashboard=""></iframe>

<script>
autostart_day_from.selectedIndex = "${morningCron[3]}"
autostart_day_to.selectedIndex = "${morningCron[4]}"
autostop_day_from.selectedIndex = "${nightCron[3]}"
autostop_day_to.selectedIndex = "${nightCron[4]}"

	otherURL=document.location.search.match("otherURL=([^&]*)");
if (otherURL) {
	for (var u of otherURL[1].split(",")) {
		var f = document.createElement("iframe");
		f.setAttribute("dashboard",u)
		document.body.appendChild(f);
	}
}
</script>


</body>
</html>
EOF


fi


# ./Plummet getMasterArd
# ./Plummet command "" 5

